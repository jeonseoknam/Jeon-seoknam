//for문 반복 후 실행조건에 여러개가 들어갈때
public class main {
  public static void main(String[] args) {
    for(int i = 0; i<10; i++, System.out.println(i))
      System.out.println(i);
  }
}


//for-each문으로 2차원 ragged array의 모든 요소 출력하는법
public class main {
  public static void main(String[] args) {
   char[][] arr = {{65,66}, {67,68,69}};
   for( char[] innerArray : arr )
     for( char c : innerArray )
       System.out.println(c);
  }
}



//일반 for문으로 ragged배열 요소 출력법(3장 32p)

public class main {
  public static void main(String[] args) {
  int[] t1 = {10, 100};
  int[] t2 = {20, 200, 2000, 20000};
  int[][] test = {t1, t2}; // t1이 1행 배열, t2가 2행 배열이라 생각하면 될듯

  for(int i = 0; i<test.length; i++)
    for(int j = 0; j<test[i].length; j++)  //tset[i][].length 같은 문장은 없다. 배열의 행번호인 i를 넣어줘야 한다.
      System.out.println(test[i][j]);

  }
}


// 위 코드와 다르가 직접 할당해준 문장. test[0]가 t1을 참조, tset[1]이 t2를 참조한다.
public class main {
  public static void main(String[] args) {
  int[] t1 = {10, 100};
  int[] t2 = {20, 200, 2000, 20000};
  int test[][];
  test = new int[2][];
  test[0] = t1;
  test[1] = t2;

  for(int i = 0; i<test.length; i++)
    for(int j = 0; j<test[i].length; j++)
      System.out.println(test[i][j]);

  }
}



//동적할당으로 2차원 ragged배열 만들고 값 넣어주기. 위 코드들이랑 방식 같음
public class main {
  public static void main(String[] args) {

  int test[][];
  test = new int[2][];
  test[0] = new int[3];
  test[1] = new int[4];

  for(int i = 0; i<test.length; i++)
    for(int j = 0; j<test[i].length; j++) {
      test[i][j] = 4;
    }
  for(int i = 0; i<test.length; i++)
    for(int j = 0; j<test[i].length; j++)
      System.out.println(test[i][j]);

  }
}


//try-catch문에서 에러상황이 발생하기 전까지의 코드는 실행된다. B,C는 출력되어야한다. 
//가장 큰 try문 안에서 예외가 났다면, 큰 try문도 catch를 한다. try-catch문도 나올

public class main {
  public static void main(String[] args) {
    try{ 
      String[] s = {"A", "B", "C"};
      try{
        for(int i = 1; i<5; i++)
          System.out.println(s[i]);
      }catch(ArithmeticException e){
        System.out.println("D");
      }
      finally {
        System.out.println("E");
      }
    }catch(Exception e){
      System.out.println("F");
    }finally{
      System.out.println("G");
    }
  }

}//안쪽 작은 try-catch문의 에러를 에러상황과 맞게 수정해줬다. 안쪽에서 catch가 일어나니까 바깥쪽 catch는 일어나지 않는다. 한번 잡으면 안 잡나보다

public class main {
  public static void main(String[] args) {
    try{
      String[] s = {"A", "B", "C"};
      try{
        for(int i = 1; i<5; i++)
          System.out.println(s[i]);
      }catch(ArrayIndexOutOfBoundsException e){
        System.out.println("D");
      }
      finally {
        System.out.println("E");
      }

    }catch(Exception e){
      System.out.println("F");
    }finally{
      System.out.println("G");
    }

  }
}


//강제형변환 해야하는 것을 고르시오
//byte의 표현범위: -128~127(256을 절반취하기)
//컴파일러는 리터럴에서 '_'를 빼고 처리한다.(2장 20p)
// 15_; 리터럴 끝 사용 불가
// 3_.14; 소수점 앞 사용 불가
// 12345_L; L, F(Float) 앞에 사용 불가
// 0_X15; 0x의 중간이나 끝, 앞에 사용 불가
// _로 리터럴 생략할때 맨 앞, 맨 끝에는 올 수 없다!!! _2000, 2000_ 이런거 안된다!!

public class main {
  public static void main(String[] args) {
    short s1 = 0x7f_ff;  // 0x7fff;와 같다
    byte b1 = 0x8f;
    int i1 = 0xff_ff_ff_ff; // 0x로 시작하면 16진수
    int i2 = 0xff_ff_ff_ffL; 0x_ffffffffL과 같다
    long l1 = 0xff_ff_ff_ffL;

  }
}


//swtich() 내부에 들어갈 수 있는 인자, case 조건 : 에서 조건에 들어갈 수 있는 인자 판단하기
// case문의 조건값으로 가능한것 -> 문자(int), 정수(char), 문자열(String) 리터럴만 가능하다. boolean, double 같은거 오면 안된다. 변수 사용도 안된다
// switch() 내부 값으로 가능한것 -> 보통 수식이 오는데, 수식 뿐만 아니라 int형이 커버 가능한 범위의 정수와 문자, String 까지는 올 수 있다. 
// 주의할건 switch() 내부에 boolean이 오면 안된다. 조건식은 올 수 없다.
// case의 값이 안 맞아도, break없이 위에서 실행되었다면 아래도 실행되는거 놓치면 안된다.

public class main {
  public static void main(String[] args) {
    int a = 10, b=5;
    switch (a%b) {
      case 1 - 1:
        System.out.println(0);
      case 2 - 1:
        System.out.println(1);
    }
    switch(a%b==0){
      case 1:
        System.out.println(true);
      case 0:
        System.out.println(false);
    }

  }
}



//컴파일 오류 나는지 판단하시오
// 생성자는 반환형이 없다. 그냥 메서드와 생성자 구분하는법
public class main {
  void dd(){
    System.out.println("DD");
  }

  public static void main(String[] args) {
    new dd();
    }

  }



// 빈 배열의 출력값(형변환은 안된다 배열은?)
// 힙공간에 빈 배열이 0으로만 채워지는게 아니라, 각 배열의 자료형에 맞게 채워진다
// byte, int, short -> 0
// double, float -> 0.0
// Object -> null
// String, char -> null
// 근데 이상하게 char형 배열은 null이 아니라 아무것도 출력이 안된다. 왜일까? \0은 그냥 무출력인가?


public class main {
  public static void main(String[] args) {
  
    byte[] b = new byte[2];
    int[] i = new int[2];
    float[] f = new float[2];
    Object[] o = new Object[2];
    String[] s = new String[2];
    char[] c = new char[2];
 
    System.out.println(b[1]+","+i[1]+","+f[1]+","+o[1]+","+s[1]+","+c[1]);
    }

  }


//Integer.ParseInt()에서 내부의 값은 String이 되어야 한다
//int a 같이 int형 정수형 뿐만 아니라 double, long에도 담아줄 수 있다. 기본형 타입의 형변환이 가능하기 때문이다. byte나 short같이 더 작은애로 바꿔주려면 강제형변환 해야된다.
//String이나 char로 바꾸는건 당연히 컴파일에러 난다.
public class main {
  public static void main(String[] args) {

    int a = Integer.parseInt("123");
    }
  }


//String과 숫자가 붙으면, 다 String으로 묶어버린다.
public class main {
  public static void main(String[] args) {

   String a = 1+23+"45";
    }

  }



//대입연산자는 애초에 boolean식이 아니다.. ==이나 !=이 boolean이 결과로 나오는 것이다
public class main {
  public static void main(String[] args){
   
    boolean a = 1=2;
    }

  }


//자바에서 boolean은 강제 캐스팅 불가능하다. 즉 true, flase로 직접 선언해야 한다. 참거짓을 강요하면 안된다
public class main {
  public static void main(String[] args) {

    int a = 10;
    int b = 5;
    boolean d = a>b?(boolean)1:(boolean)0;

    }
  }




//아래 두개는 되는 코드다.
public class main {
  public static void main(String[] args) {

    boolean a = !((!true||true)&&false);
    System.out.println(a);

    }
  }



public class main {
  public static void main(String[] args) {
    boolean a = (1<2) == false;
    System.out.println(a);
    }
  }

//2차원 ragged배열 for-each문으로 접근하는법
public class main {
  public static void main(String[] args) {
    int[] a ={10,100};
    int[] b ={20,200,2000,20000};

    int[][] test = {a,b};
    test[0] = a;
    test[1] = b;

    for(int[] innerArray : test) {
      for (int c : innerArray) {
        System.out.print(c + " ");
      }
      System.out.println();
    }
  }
}


//java의 call-by-value에 대한 문제.(중요)
//print 메서드에서 일어난 a의 변경된 참조는, main메서드에는 영향을 주지 못한다. 즉 한 메서드 안에서 일어난 일은 다른 메서드에는 영향을 주지 못한다.
public class main {
  public static void main(String[] args) {

    int x = 3;
    A a = new A(); // 레퍼런스 변수가 a인 객체를 생성. 이때 객체의 멤버변수인 a는 0으로 초기화된다(힙영역에 저장되기 때문)
    System.out.println(x);
    x = 4;
    a.a = 5;
    System.out.println(a.a);
    A.print(x, a); //x=4, a=5 ??

    System.out.println(x); // y가 x를 가리키지 못한다. x는 primitive 변수이기 때문이다. y는 x의 값을 못바꿈.
    System.out.println(a.a); //5가 아닌 7이 나온 이유를 그림으로 설명해보기
  }

}

class A {
  int a;

  static void print(int y, A a) {
    y += 1;
    System.out.println(y);
    a.a = y + 2;
    System.out.println(a.a);
    a = new A();   //클래스의 메서드 안에서 생성자를 또 만들 수 있다? ㅇㅇ -> 이때 새로운 객체를 생성하고 a가 0으로 초기화된다.
    a.a = y;
    System.out.println(a.a);
  }
}

//기본 생성자에 대해 생각해보자(4장 21p)
//생성자 이름은 클래스 이름과 반드시 동일해야하고, 리턴 타입을 지정할 수 없다. 따라서 A1()은 생성자가 아니다
// 생성자가 없음에도 A1();이 오류가 안 나고 실행된 이유는 컴파일러가 자동으로 기본 생성자를 삽입했기 때문이다.
// 그러나 기본 생성자는 아무런 동작을 하지 않기 때문에 출력값은 없다.
//기본 생성자가 생기는 조건을 잘 생각하자. 클래스에 생성자가 "하나도" 없어야한다.

public class main{
  public static void main(String[] args)
  {
    new A1();
  }
}

class A1{
  void A1()
  {
    System.out.println("a");
  }
}


//출력값이 있으면 쓰고 없으면 이유를 쓰시오
//메서드 오버로딩 문제(4장 43p)
//인자로 들어간 녀석과 더 적합한 메서드를 선택한다. int-> byte 형변환 안되는걸 명심. 형변환표 외웠나 체크
//기본적으로 실수는 double이라 생각하자. float보다 double에 가깝다.

public class main{
  public static void main(String[] args) {
    A1 a=new A1();
    a.f(1, 2);
    a.f(10000, 20000);
    A2 b=new A2();
    b.f(2.5, 10000);
  }
}
class A1{
  void f(double a, double b) {System.out.println("d d");} //오버로딩되면 해당하는 메서드로 자동 이동하는건가 변수가?
  void f(byte a, byte b) {System.out.println("b b");}
}

class A2{
  void f(double a, double b) {System.out.println("d d");}
  void f(float a, int b) {System.out.println("f i");}
}


//과제에 비슷한 문제 있었다(3장 과제 4번)
//char 유니코드 해석, charAt(0)의 의미, char형의 int형 형변환
import java.util.Scanner;
public class main{
  public static void main(String[] args) {
    char a1='\u0061'; // a1은 'a'를 의미
    Scanner scanner =  new Scanner(System.in);
    String temp=scanner.next();  //temp는 문자열을 받는 객체
    char a2 = temp.charAt(0);  // a2는 temp의 첫번째 글자를 받는다
    for(int i=a2;i>=a1;i--) {   //받아온 글자부터, a까지 돌린다. 이때 char형이 int로 형변환했다. a1도 int로 형변환
      for(char j=a1;j<=i;j++) // a부터 i가 해당하는 문자까지 출력한다.
        System.out.print(j + " ");
      System.out.println();
    }
  }
}

//중첩된 try-catch에서 흐름 읽는법(예외처리 유형)
//배열의 index에 식이 들어가도 된다. 0으로 나누거나 잘못된 인덱스에 접근하는게 안되는거다.'
//오류가 난 문장이 아예 실행 안되는게 아니다. 오류나기 직전 상황까지는 코드가 다 돌아간다. ary[1], ary[2]는 돌아가는걸 놓치면 안된다.
//내부 try에서 catch를 했으므로, 외부 try에서는 catch하지 않는다.
public class main {

  public static void main(String args[]){
    String[] ary = {"A","B","C"};
    int a=0,b=5;

    try{
      System.out.print(ary[a/5]);
      try{
        for(int i=1;i<4;++i)
          System.out.print(ary[i]);
      }
      catch(Exception e){
        System.out.println("D");
      }
      finally{
        System.out.println("E");
      }
    }
    catch(Exception e){
      System.out.println("F");
    }
    finally{
      System.out.println("G");
    }

  }
}

//String타입은 자바에서 불변이다. 만약에 어떤 메서드로 바꿔줬다면, 그 바뀐 객체를 임의의 변수에 할당해서 저장해줘야 한다
public class main {
  public static void main(String[] args) {

    String a = "cook";
    a.replace("c","k");
    System.out.println(a);
  }
}


//문자열과 +가 섞이면 무조건 문자열로 출력된다
//주의해야 하는건, 문자열이 나오기 전까지의 시점은 숫자들끼리의 계산을 한다. 문자열이 나오면 그 뒤는 다 문자열 취급하고 붙인다.
public class main {
  public static void main(String[] args) {

    System.out.println(12+23+"45");
    System.out.println(1.0+2.0+3+"45");
    System.out.println("44"+1+2.0);
    System.out.println(1+2.0+"44");

  }
}

//자바는 중괄호로 스코프를 생성할 수 있다
//그래서 같은 메서드 또는 스코프 내부에서는 재정의를 할 수 없다.(이미 쓴 이름을 또 쓸 수 없다)
public class main {

  public static void main(String args[]){
    int a = 10;
    System.out.println(a);
    {
      int a = 20;
      int b = 10;
      
    }
    System.out.println(a);
  }
}


//this 레퍼런스 활용 문제
//이 문제의 경우 increase() 메서드가 현재 인스턴스의 참조를 반환한다. 즉 tt의 참조를 반환한다는 것이다. 그래서 연속해서 메소드를 사용할 수 있는 것이다.
public class main {

  int i = 0;
  main increase(){ //반환형이 main인 것이 main형 레퍼런스 인스턴스인 tt를 반환하려고 설정한 것
    i++;
    return this;
  }
void show(){
  System.out.println(i);
}
  public static void main(String[] args) {
main tt = new main();
tt.increase().increase().increase().show();
  }
}

