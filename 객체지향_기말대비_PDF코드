//상속
package 객체지향;


class Point{
  private int x,y;
  public void set(int x, int y)
  {
    this.x = x;
    this.y = y;
  }
  public void showPoint(){
    System.out.println("("+x+","+y+")");
  }
}

class ColorPoint extends Point{
  private String color;
  public void setColor(String color){
    this.color = color;
  }
  public void showColorPoint(){
    System.out.println(color);
    this.showPoint();  //부모클래스에 있는 메서드를 그냥 call했다. 상속했으니 가능하며, this가 생략되었다 생각하기
  }
}
public class ColorPointEx {
  private static void main(String[] args)
  {
    Point p = new Point();
    p.set(1,2);
    p.showPoint();

    ColorPoint cp = new ColorPoint();
    cp.set(3,4);
    cp.setColor("red");
    cp.showColorPoint();
  }
}


//super()로 슈퍼클래스의 생성자 선택하는 예제
package 객체지향;


class Point{
  private int x,y;
  public Point(int x, int y)
  {
    this.x = x;
    this.y = y;
  }
  public void showPoint(){
    System.out.println("("+x+","+y+")");
  }
}

class ColorPoint extends Point{
  private String color;
  public ColorPoint(int x, int y, String color){
    super(x,y);
    this.color = color;
  }

  public void showColorPoint(){
    System.out.println(color);
    showPoint();
  }
}
public class ColorPointEx {
  public static void main(String[] args)
  {
    ColorPoint cp = new ColorPoint(5,6,"blue");
    cp.showColorPoint();
  }
}



//업캐스팅 예제
package 객체지향;

class Person{
  String name;
  String id;
  
  public Person(String name){
    this.name = name;
  }
}

class Student extends Person{
  String grade;
  String department;
  public Student(String name){
    super(name);
  }
}
public class UpcastingEx {
  public static void main(String[] args)
  {
    Person p;
    Student s = new Student("이재문");
    p = s; //업캐스팅

    System.out.println(p.name);
    p.grade = "A";
    p.department = "com"; // p는 sutdent를 가리키고 있지만 타입이 Person이므로 grade, department에 접근 불가.
  }
}


//instanceof는 자신과 up, down 관계인 애들만 비교 가능하다는 예제. 그걸 어기면 컴파일에러
package 객체지향;

class Person{

}

class Student extends Person{

}

class Researcher extends Person{

}

class Circle{
  
}

class Professor extends Researcher{

}
public class InstanceofEx {
  public static void main(String[] args)
  {
    Person jee = new Student();
    Person kim = new Professor();
    Person lee = new Researcher();
    Student jeon = new Student();
    boolean a = jee instanceof Person;
    boolean b = lee instanceof Circle;
    boolean c = jeon instanceof Researcher;
  }
}



//instanceof 활용사례. print()메서드 안에 new Student();처럼 생성자 호출이 파라매터로 들어가는 것도 봐두기
package 객체지향;

class Person{

}

class Student extends Person{

}

class Researcher extends Person {
}

class Professor extends Researcher{

}
public class InstanceofEx {
  static void print(Person p) {
    if (p instanceof Person)
      System.out.print("Person ");

    if (p instanceof Student)
      System.out.print("Student ");

    if(p instanceof Researcher)
      System.out.print("Researcher ");
    if (p instanceof Professor)
      System.out.print("Professor ");

    System.out.println();
  }
  public static void main(String[] args)
  {
    System.out.print("new Student() ->\t");
    print(new Student());
    System.out.print("new Researcher() ->\t");
    print(new Researcher());
    System.out.print("new Professor() ->\t");
    print(new Professor());

  }
}



//오버라이딩 활용 예제. circle에서 draw가 없으니 shape의 draw();가 실행되는 것도 봐보자
package 객체지향;

import java.awt.*;

class Shape{
  public Shape next; //이건뭐지?
  public Shape(){next = null;}

  public void draw(){
    System.out.println("shape");
  }
}

class Line extends Shape{
  public void draw(){
    System.out.println("Line");
  }
}

class Rect extends Shape{
  public void draw(){
    System.out.println("Rect");
  }
}

class Circle extends Shape{

}
public class MethodOverridingEx {
  static void paint(Shape p){  //이 라인 덕분에 오버라이딩 실현된 것
    p.draw();
  }

  public static void main(String[] args)
  {
    Line line = new Line();
    paint(line);
    paint(new Shape());
    paint(new Rect());
    paint(new Circle());

    Shape b = new Circle();
    b = new Line();
    b = new Rect(); //객체 레퍼런스 b가 가리키는 객체들을 계속 바꿔주는 것
    paint(b); // b가 Rect를 가리키고 있는 상태에서 paint();
  }
}


//@override 사용. shape의 draw를 쓰고싶을땐 어떻게 해야되는지 해보기
package 객체지향;

import org.w3c.dom.css.Rect;

import javax.sound.sampled.Line;
import java.awt.*;

class Shape{
  protected String name;
  public void paint(){
    draw();
  }

  public void draw()
  {
    System.out.println("shape");
  }
}

  class Circle extends Shape{
    @Override
    public void draw(){
      System.out.println("Circle");
    }
  }

public class MethodOverridingEx {
  public static void main(String[] args)
  {
    Shape b = new Circle();
    b.paint();
  }
}



//오버라이딩 해놓고, 슈퍼클래스의 메서드를 쓰고 싶을때
package 객체지향;

import org.w3c.dom.css.Rect;

import javax.sound.sampled.Line;
import java.awt.*;

class Shape{
  protected String name;
  public void paint(){
    draw();
  }

  public void draw()
  {
    System.out.println(name);
  }
}

  class Circle extends Shape{
  protected String name;
    @Override
    public void draw(){
      this.name = "Circle";
      super.name = "shape";
      super.draw();
      System.out.println(this.name);
    }
  }

public class MethodOverridingEx {
  public static void main(String[] args)
  {
    Shape b = new Circle();
    b.paint();
  }
}



//접근지정자를 넓혀도 오버라이딩이 가능하다는 예제
package 객체지향;

class A{
  protected void f(){
    System.out.println("f다");
  }
}

class B extends A{
  public void f(){
    System.out.println("B의 f다.");
  }
}
public class OverrideErrorEx {
  public static void main(String[] args)
  {
    A a = new B();
    a.f();
  }
}


//final 메서드를 오버라이딩 하려고 하면 컴파일에러가 난다
package 객체지향;

class A{
  protected final void f(){
    System.out.println("f다");
  }
}

class B extends A{
  public void f(){
    System.out.println("B의 f다.");
  }
}
public class OverrideErrorEx {
  public static void main(String[] args)
  {
    A a = new B();
    a.f();
  }
}


//static 메서드는 오버라이딩이 되지 않는다. 하지만 다음 코드가 컴파일에러가 나지는 않는다. 그냥 정적바인딩으로 취급해서 A의 f(), B의 f() 따로 있는걸로 취급한다. @override를 쓰면 컴파일에러가 난다. A와 B의 f()써보기
package 객체지향;

class A{
  protected static void f(){
    System.out.println("f다");
  }
}

class B extends A{
  protected static void f(){
    System.out.println("B의 f다.");
  }
}
public class OverrideErrorEx {
  public static void main(String[] args)
  {
    A a = new B();
    a.f();
  }
}




//추상클래스 구현 연습(계산기)
package 객체지향;

abstract class Calculator {
  public abstract int add(int a, int b);
  public abstract int subtract(int a, int b);
  public abstract double average(int[] a);
}

public class GoodCalc extends Calculator{
  @Override
  public double average(int[] a) {
    double sum = 0;
    for(int i =0; i<a.length; i++)
      sum += a[i];
    return sum/a.length;
  }

  @Override
  public int add(int a, int b) {
    return a+b;
  }

  @Override
  public int subtract(int a, int b) {
    return a-b;
  }

  public static void main(String[] args)
  {
    GoodCalc c = new GoodCalc();
    System.out.println(c.add(2,3));
    System.out.println(c.subtract(2,3));
    System.out.println(c.average(new int[]{2,3,4}));
  }
}



//인터페이스 사용 예제. SamsungPhone. 인터페이스가 약간 뼈대 느낌이고, 각 객체에 맞게 추상메서드들을 구현해서 실체화한다는 느낌인듯
package 객체지향;



interface PhoneInterface{
  public static final int TIMEOUT = 10000;
  public abstract void sendCall();
  public abstract void receiveCall();
  public default void printLogo(){ //디폴트 메소드인 것이지 이 메소드 접근지정자가 디폴트가 아님. public임
    System.out.println("**Phone**");
  };
}

class SamsungPhone implements PhoneInterface{
  @Override
  public void sendCall(){
    System.out.println("띠리리리링");
  }

  @Override
  public void receiveCall(){
    System.out.println("전화가 왔습니다");
  }

  public void flash(){
    System.out.println("전화기에 불이 켜졌습니다.");
  }
}

public class InterfaceEx{
  public static void main(String[] args)
  {
    SamsungPhone phone = new SamsungPhone();
    phone.printLogo();
    phone.sendCall();
    phone.receiveCall();
    phone.flash();
  }
}


//메소드의 재귀처럼 보이지만 오버라이딩이라 문제 없는 유형
package 객체지향;

class SuperObject{
  public void paint(){
    draw();
  }
  public void draw(){
    draw();
    System.out.println("Super Object");
  }
}

class SubObject extends SuperObject{
  @Override
  public void paint(){
    super.draw();
  }
  @Override
  public void draw(){
    System.out.println("Sub Object");
  }
}
public class ExMain {
  public static void main(String[] args)
  {
    SuperObject b = new SubObject();
    b.paint();
  }
}


//interface default 메소드_인터페이스 내에서 구현부가 명시된 메소드를 사용할 수 있게 되었다.
package 객체지향;

interface Interface{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}

class Cls implements Interface{
  @Override
  public void method(){
    System.out.println("method() in Cls");
  }
}

public class InterfaceEx {
  public static void main(String[] args)
  {
    Interface obj = new Cls();
    obj.method();
    obj.method2();
    
    
    Cls obj2 = new Cls();
    obj2.method();
    obj2.method2();
  }
}


//디폴트메소드의 오버라이드
package 객체지향;

interface Interface{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}

class Cls implements Interface{
  @Override
  public void method(){
    System.out.println("method() in Cls");
  }

  @Override
  public void method2(){
    System.out.println("method2() in Cls");  //디폴트메소드도 오버라이드가 가능하다.
  }
}

public class InterfaceEx {
  public static void main(String[] args)
  {
    Cls obj2 = new Cls();
    obj2.method();
    obj2.method2();

    Interface obj = new Cls();
    obj.method();
    obj.method2();

  }
}



//인터페이스의 메소드를 사용하기 위한 super
package 객체지향;

interface Interface22{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}

class Cls implements Interface22{
  @Override
  public void method(){
    System.out.println("method() in Cls");
  }

  @Override
  public void method2(){
    Interface22.super.method2();     //인터페이스에 있는 default메소드를 쓰고싶으면 인터페이스이름.super.메소드이름
    System.out.println("method2() in Cls");
  }
}

public class InterfaceEx {
  public static void main(String[] args)
  {
    Cls obj = new Cls();
    obj.method();
    obj.method2();

    Interface22 obj2 = new Cls();
    obj2.method();
    obj2.method2();

  }
}



//interface를 구현한 class에서 어디까지 쓸 수 있는가
package 객체지향;

interface Interface{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}

interface SubInterface extends Interface{
  void method();
  @Override
  default void method2()
  {
    System.out.println("method2() in SubInterface");
  }
}
class Cls implements SubInterface{
  @Override
  public void method(){
    method2();  //일종의 상속받은 느낌? SubInterface에 구현된 default메소드라 쓸 수 있다
    System.out.println("method() in Cls");
  }

}

public class InterfaceEx {
  public static void main(String[] args)
  {
    Cls obj = new Cls();
    obj.method();
    obj.method2();

    SubInterface obj2 = new Cls();
    obj2.method();
    obj2.method2();

    Interface obj3 = new Cls();
    obj3.method();
    obj3.method2();
  }
}







//인터페이스의 디폴트메소드와 클래스의 메소드 이름이나 인자가 같아 충돌 할 것 같을때 결과
package 객체지향;

interface Interface{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}
class SuperCls{
  public void method2(){   //인터페이스의 디폴트 메소드도 method2()로, 이름이 같다. 충돌? ㄴㄴ. class의 메소드가 실행된다
    System.out.println("method2() in SuperCls");
  }
}

class Cls extends SuperCls implements Interface{
  @Override
  public void method(){
    System.out.println("method() in Cls");
  }
}




public class InterfaceEx {
  public static void main(String[] args)
  {
  Cls obj = new Cls();
  obj.method();
  obj.method2();

  Interface obj2 = new Cls();
  obj2.method();
  obj.method2();
  }
}






//내부 파라매터가 달라지면 당연히 Interface의 메소드가 실행된다
package 객체지향;

interface Interface{
  void method();
  default void method2(){
    System.out.println("method2() in Interface");
  }
}
class SuperCls{
  public int method2(int x){   //인터페이스의 디폴트 메소드도 method2()로, 이름이 같다. 충돌? ㄴㄴ. class의 메소드가 실행된다
    System.out.println("method2() in SuperCls");
    return x;
  }
}

class Cls extends SuperCls implements Interface{
  @Override
  public void method(){
    System.out.println("method() in Cls");
  }
}




public class InterfaceEx {
  public static void main(String[] args)
  {
  Cls obj = new Cls();
  obj.method();
  obj.method2();

  Interface obj2 = new Cls();
  obj2.method();
  obj.method2();
  }
}


//디폴트메소드를 오버라이드하고 super 쓰는법
package 객체지향;
interface Interface{
  void method();
  default void newDefaultMethod(){
    System.out.println("newDefaultMethod() in Interface");
  }
}

interface AnotherInterface{
  default void newDefaultMethod(){
    System.out.println("newDefaultMethod() in AnotherInterface");
  }
}

class Cls implements Interface, AnotherInterface
{

@Override
public void method() {
  System.out.println("method() in Cls");
}

@Override
  public void newDefaultMethod(){
  Interface.super.newDefaultMethod();
  AnotherInterface.super.newDefaultMethod();
  System.out.println("NewDefaultMethod() in Cls");
}
}

public class InterfaceEx{
  public static void main(String[] args)
  {
    Cls obj = new Cls();
    obj.method();
    obj.newDefaultMethod();

    Interface obj2 = new Cls();
    obj2.method();
    obj2.newDefaultMethod();

    AnotherInterface obj3 = new Cls();
    //obj3.method();
    obj3.newDefaultMethod();

  }
}




//equals(), toString() 오버라이드 예제

package 객체지향;

class Point{
  private int x, y;
  public Point(int x, int y)
  {
    this.x = x;
    this.y = y;
  }
  public String toString(){
    return "Point(" +x+","+y+")";
  }

  public boolean equals(Object obj)
  {
    Point p = (Point)obj;
    if(x==p.x && y==p.y)
      return true;
    else return false;
  }

}
public class ToStringEx{
  public static void main(String[] args)
  {
   Point a = new Point(2,3);
   Point b = new Point(2,3);
   Point c = new Point(3,4);

   if(a==b)
     System.out.println("a==b");
   if(a.equals(b))
     System.out.println("a is equal to b");
   if(a.equals(c))
     System.out.println("a is equal to c");
  }

}


//사각형의 너비가 같으면 두 Rect객체가 같다고 판별하는 equals() 오버라이드 예제코드
package 객체지향;

class Rect {
  private int width;
  private int height;

  public Rect(int width, int height) {
    this.width = width;
    this.height = height;
  }


  public boolean equals(Object obj) {
    Rect p = (Rect) obj;
    if (width * height==p.width*p.height)
      return true;
    else
      return false;
  }
  }
  public class EqualsEx{
  public static void main(String[] args)
  {
    Rect a = new Rect(2,3);
    Rect b = new Rect(3,2);
    Rect c = new Rect(3,4);
    if(a.equals(b))
      System.out.println("a is equal to b");
    
  }
  }


//Wrapper클래스
public  class Test{
  public static void main(String[] args)
  {
    Integer i = Integer.valueOf("3.14"); //안 맞는 자료형으로 Wrapper객체를 생성하려고 하면 NumberFormatException이 뜬다. 즉 강제캐스팅을 안해줘서 뜨는 것 같다.
    Double i = Double.valueOf("3"); //강제캐스팅(묵시적캐스팅)되는건 에러가 뜨지 않는다.
    System.out.println(i);
  }
}



//compareTO사용
public  class WrapperEx{
  public static void main(String[] args) {
  String java = "Java";
  String cpp = "C++";
  int res = java.compareTo(cpp);
  if(res==0)
    System.out.println("the same");
  else if(res<0)
    System.out.println(java+" < "+cpp);
  else
    System.out.println(java+" > "+cpp); //Java > C++이라는건 Java가 C++보다 나중에 사전에서 나온다는 뜻

  }
}
